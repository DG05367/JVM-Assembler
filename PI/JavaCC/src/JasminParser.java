/* Generated by: JavaCC 21 Parser Generator. JasminParser.java */
import java.util.Arrays;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Map;
import java.util.concurrent.CancellationException;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.ArrayList;
import Jasmin.*;
@SuppressWarnings("unused")
public class JasminParser implements JasminParserConstants {
    ArrayList listInstr= new ArrayList();
    ArrayList getInstr() {
        return listInstr;
    }

    Jasmin jasmin= new Jasmin();
    public void jasminCode() {
        System.out.println(jasmin.getCode());
    }

    static final int UNLIMITED= Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private boolean scanToEnd;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private boolean cancelled;
    public void cancel() {
        cancelled= true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public JasminParserLexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public JasminParser(String inputSource, CharSequence content) {
        this(new JasminParserLexer(inputSource, content));
    }

    public JasminParser(CharSequence content) {
        this("input", content);
    }

    /**
   * @param inputSource just the name of the input source (typically the filename) that 
   * will be used in error messages and so on.
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public JasminParser(String inputSource, Path path) throws IOException {
        this(inputSource, JasminParserConstants.stringFromBytes(Files.readAllBytes(path)));
    }

    public JasminParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, JasminParserConstants.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public JasminParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public JasminParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public JasminParser(Reader reader) {
        this(new JasminParserLexer("input", reader));
    }

    /** Constructor with user supplied Lexer. */
    public JasminParser(JasminParserLexer lexer) {
        token_source= lexer;
        lastConsumedToken= lexer.DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result= token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result= token_source.getNextToken(result);
        }
        nextTokenType= null;
        return result;
    }

    /**
   * @return the next Token off the stream. This is the same as #getToken(1)
   */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
 * @param index how many tokens to look ahead
 * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream. 
 * If we are in a lookahead, it looks ahead from the currentLookaheadToken
 * Otherwise, it is the lastConsumedToken. If you pass in a negative
 * number it goes backward.
 */
    final public Token getToken(final int index) {
        Token t= currentLookaheadToken== null?lastConsumedToken:
        currentLookaheadToken;
        for (int i= 0; i<index; i++) {
            t= nextToken(t);
        }
        for (int i= 0; i> index; i--) {
            t= t.getPrevious();
            if (t== null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType== null) {
            nextTokenType= nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.add(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.remove(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType> > enumSetCache= new HashMap<> ();
    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key= new TokenType[1+rest.length];
        key[0]= first;
        if (rest.length> 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result= (rest.length== 0)?EnumSet.of(first):
        EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // JasminParser.jj:271:1
    final public void Start() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Start";
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:272:5
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:272:6
            consumeToken(TokenType.LINE_COMMENT);
        }
        // Code for RegexpRef specified at:
        // JasminParser.jj:272:23
        consumeToken(TokenType.CLASS);
        // Code for RegexpRef specified at:
        // JasminParser.jj:272:31
        consumeToken(TokenType.PUBLIC);
        // Code for RegexpRef specified at:
        // JasminParser.jj:272:40
        consumeToken(TokenType.IDENTIFIER);
        // Code for CodeBlock specified at:
        // JasminParser.jj:272:53
        jasmin.setClassName(getToken(0).getImage());
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:273:5
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:273:6
            consumeToken(TokenType.LINE_COMMENT);
        }
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:273:23
        if (nextTokenType()== TokenType.SUPER) {
            // Code for NonTerminal specified at:
            // JasminParser.jj:273:24
            pushOntoCallStack("Start", "JasminParser.jj", 7203);
            try {
                SuperDeclaration();
            }
            finally {
                popCallStack();
            }
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:274:5
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:274:6
            consumeToken(TokenType.LINE_COMMENT);
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:274:23
        while (true) {
            if (!(nextTokenType()== TokenType.DOT_METHOD)) break;
            // Code for NonTerminal specified at:
            // JasminParser.jj:274:24
            pushOntoCallStack("Start", "JasminParser.jj", 7245);
            try {
                MethodDeclaration();
            }
            finally {
                popCallStack();
            }
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:274:44
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:274:45
            consumeToken(TokenType.LINE_COMMENT);
        }
    }

    // JasminParser.jj:277:1
    final public void ClassDeclaration() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ClassDeclaration";
        // Code for RegexpRef specified at:
        // JasminParser.jj:278:9
        consumeToken(TokenType.CLASS);
        // Code for RegexpRef specified at:
        // JasminParser.jj:278:17
        consumeToken(TokenType.PUBLIC);
        // Code for RegexpRef specified at:
        // JasminParser.jj:278:26
        consumeToken(TokenType.IDENTIFIER);
    }

    // JasminParser.jj:281:1
    final public void SuperDeclaration() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SuperDeclaration";
        // Code for RegexpRef specified at:
        // JasminParser.jj:282:9
        consumeToken(TokenType.SUPER);
        // Code for RegexpRef specified at:
        // JasminParser.jj:282:17
        consumeToken(TokenType.IDENTIFIER);
        // Code for CodeBlock specified at:
        // JasminParser.jj:282:30
        jasmin.setSuperClassName(getToken(0).getImage());
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:283:5
        while (true) {
            if (!(nextTokenType()== TokenType.SLASH)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:283:6
            consumeToken(TokenType.SLASH);
            // Code for CodeBlock specified at:
            // JasminParser.jj:283:14
            jasmin.setSuperClassName(getToken(0).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:284:5
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:284:18
            jasmin.setSuperClassName(getToken(0).getImage());
        }
    }

    static private final EnumSet<TokenType> Instruction_FIRST_SET= Instruction_FIRST_SET_init();
    static private EnumSet<TokenType> Instruction_FIRST_SET_init() {
        return tokenTypeSet(TokenType.GO_TO, TokenType.GO_TO_W, TokenType.A_NEW_ARRAY, TokenType.ARRAY_LENGTH, TokenType.ARETURN, TokenType.ALOAD, TokenType.ALOAD_0, TokenType.ALOAD_1, TokenType.ALOAD_2, TokenType.ALOAD_3, TokenType.BALOAD, TokenType.CALOAD, TokenType.CASTORE, TokenType.CHECKCAST, TokenType.D2F, TokenType.D2I, TokenType.D2L, TokenType.DADD, TokenType.DALOAD, TokenType.DASTORE, TokenType.DCMPG, TokenType.DCMPL, TokenType.DCONST_0, TokenType.DCONST_1, TokenType.DDIV, TokenType.DLOAD, TokenType.DLOAD_0, TokenType.DLOAD_1, TokenType.DLOAD_2, TokenType.DLOAD_3, TokenType.DMUL, TokenType.DNEG, TokenType.DREM, TokenType.DRETURN, TokenType.DSTORE, TokenType.DSTORE_0, TokenType.DSTORE_1, TokenType.DSTORE_2, TokenType.DSTORE_3, TokenType.DSUB, TokenType.DUP, TokenType.DUP_X1, TokenType.DUP_X2, TokenType.DUP2, TokenType.DUP2_X1, TokenType.DUP2_X2, TokenType.F2D, TokenType.ATHROW, TokenType.ASTORE, TokenType.ASTORE_1, TokenType.ASTORE_2, TokenType.ASTORE_3, TokenType.BASTORE, TokenType.ICONST, TokenType.ICONST_0, TokenType.ICONST_1, TokenType.ICONST_2, TokenType.ICONST_3, TokenType.ICONST_4, TokenType.ICONST_5, TokenType.ISTORE, TokenType.ISTORE_1, TokenType.ISTORE_2, TokenType.ISTORE_3, TokenType.ILOAD, TokenType.ILOAD_0, TokenType.ILOAD_1, TokenType.ILOAD_2, TokenType.ILOAD_3, TokenType.IF_ACMPEQ, TokenType.IF_ACMPNE, TokenType.IF_ICMPEQ, TokenType.IF_ICMPNE, TokenType.IF_ICMPLT, TokenType.IF_ICMPGE, TokenType.IF_ICMPGT, TokenType.IF_ICMPLE, TokenType.IFEQ, TokenType.IFNE, TokenType.IFLT, TokenType.IFGE, TokenType.IFGT, TokenType.IFLE, TokenType.IFNONNULL, TokenType.IFNULL, TokenType.IADD, TokenType.IINC, TokenType.NEW, TokenType.BIPUSH, TokenType.F2I, TokenType.F2L, TokenType.FADD, TokenType.FALOAD, TokenType.FASTORE, TokenType.FCMPG, TokenType.FCMPL, TokenType.FCONST, TokenType.FCONST_0, TokenType.FCONST_1, TokenType.FCONST_2, TokenType.FCONST_3, TokenType.FDIV, TokenType.FLOAD, TokenType.FLOAD_0, TokenType.FLOAD_1, TokenType.FLOAD_2, TokenType.FLOAD_3, TokenType.FMUL, TokenType.FNEG, TokenType.FREM, TokenType.FRETURN, TokenType.FSTORE, TokenType.FSTORE_0, TokenType.FSTORE_1, TokenType.FSTORE_2, TokenType.FSTORE_3, TokenType.FSUB, TokenType.GETFIELD, TokenType.GETSTATIC, TokenType.I2B, TokenType.I2C, TokenType.I2D, TokenType.I2F, TokenType.I2L, TokenType.I2S, TokenType.IALOAD, TokenType.IAND, TokenType.IASTORE, TokenType.IDIV, TokenType.INEG, TokenType.IMUL, TokenType.INSTANCEOF, TokenType.INVOKEDYNAMIC, TokenType.INVOKEINTERFACE, TokenType.INVOKESPECIAL, TokenType.INVOKESTATIC, TokenType.INVOKEVIRTUAL, TokenType.INVOKENONVIRTUAL, TokenType.IOR, TokenType.IREM, TokenType.ISHL, TokenType.ISHR, TokenType.ISUB, TokenType.IUSHR, TokenType.IXOR, TokenType.JSR, TokenType.JSR_W, TokenType.L2D, TokenType.L2F, TokenType.L2I, TokenType.LADD, TokenType.LALOAD, TokenType.LAND, TokenType.LASTORE, TokenType.LCMP, TokenType.LCONST_0, TokenType.LCONST_1, TokenType.LDC, TokenType.LDC_W, TokenType.LDC2_W, TokenType.LDIV, TokenType.LLOAD, TokenType.LLOAD_0, TokenType.LLOAD_1, TokenType.LLOAD_2, TokenType.LLOAD_3, TokenType.LMUL, TokenType.LNEG, TokenType.LOOKUPSWITCH, TokenType.LREM, TokenType.LRETURN, TokenType.LSHL, TokenType.LSHR, TokenType.LOR, TokenType.LSTORE, TokenType.LSTORE_0, TokenType.LSTORE_1, TokenType.LSTORE_2, TokenType.LSTORE_3, TokenType.LSUB, TokenType.LUSHR, TokenType.LXOR, TokenType.MONITORENTER, TokenType.MONITOREXIT, TokenType.MULTIANEWARRAY, TokenType.NOP, TokenType.POP, TokenType.POP_2, TokenType.PUTFIELD, TokenType.PUTSTATIC, TokenType.RET, TokenType.SALOAD, TokenType.SASTORE, TokenType.SIPUSH, TokenType.SWAP, TokenType.TABLESWITCH, TokenType.WIDE, TokenType.IRETURN, TokenType.RETURN);
    }

    // JasminParser.jj:287:1
    final public void Instruction() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Instruction";
        // Code for ExpansionChoice specified at:
        // JasminParser.jj:288:5
        if (nextTokenType()== TokenType.NEW) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:288:5
            consumeToken(TokenType.NEW);
            // Code for CodeBlock specified at:
            // JasminParser.jj:288:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:288:109
            pushOntoCallStack("Instruction", "JasminParser.jj", 7708);
            try {
                NewInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.BIPUSH) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:289:5
            consumeToken(TokenType.BIPUSH);
            // Code for CodeBlock specified at:
            // JasminParser.jj:289:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:290:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:290:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.A_NEW_ARRAY) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:291:5
            consumeToken(TokenType.A_NEW_ARRAY);
            // Code for CodeBlock specified at:
            // JasminParser.jj:291:19
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:291:117
            pushOntoCallStack("Instruction", "JasminParser.jj", 8018);
            try {
                NewArrayInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.ARRAY_LENGTH) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:292:5
            consumeToken(TokenType.ARRAY_LENGTH);
            // Code for CodeBlock specified at:
            // JasminParser.jj:292:20
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ATHROW) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:293:5
            consumeToken(TokenType.ATHROW);
            // Code for CodeBlock specified at:
            // JasminParser.jj:293:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ALOAD_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:294:5
            consumeToken(TokenType.ALOAD_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:294:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ALOAD_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:295:5
            consumeToken(TokenType.ALOAD_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:295:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ALOAD_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:296:5
            consumeToken(TokenType.ALOAD_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:296:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ALOAD_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:297:5
            consumeToken(TokenType.ALOAD_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:297:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.BALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:298:5
            consumeToken(TokenType.BALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:298:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.CALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:299:5
            consumeToken(TokenType.CALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:299:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.CASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:300:5
            consumeToken(TokenType.CASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:300:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.CHECKCAST) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:301:5
            consumeToken(TokenType.CHECKCAST);
            // Code for CodeBlock specified at:
            // JasminParser.jj:301:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:301:115
            pushOntoCallStack("Instruction", "JasminParser.jj", 9167);
            try {
                CheckCastInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.LDC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:302:5
            consumeToken(TokenType.LDC);
            // Code for CodeBlock specified at:
            // JasminParser.jj:302:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:302:109
            pushOntoCallStack("Instruction", "JasminParser.jj", 9293);
            try {
                LdcInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.ASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:303:5
            consumeToken(TokenType.ASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:303:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:304:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:304:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.ASTORE_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:305:5
            consumeToken(TokenType.ASTORE_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:305:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ASTORE_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:306:5
            consumeToken(TokenType.ASTORE_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:306:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ASTORE_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:307:5
            consumeToken(TokenType.ASTORE_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:307:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.BASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:308:5
            consumeToken(TokenType.BASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:308:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ICONST) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:309:5
            consumeToken(TokenType.ICONST);
            // Code for CodeBlock specified at:
            // JasminParser.jj:309:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:310:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:310:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.ICONST_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:311:5
            consumeToken(TokenType.ICONST_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:311:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ICONST_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:312:5
            consumeToken(TokenType.ICONST_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:312:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ICONST_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:313:5
            consumeToken(TokenType.ICONST_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:313:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ICONST_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:314:5
            consumeToken(TokenType.ICONST_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:314:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ICONST_4) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:315:5
            consumeToken(TokenType.ICONST_4);
            // Code for CodeBlock specified at:
            // JasminParser.jj:315:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ICONST_5) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:316:5
            consumeToken(TokenType.ICONST_5);
            // Code for CodeBlock specified at:
            // JasminParser.jj:316:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ISTORE_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:317:5
            consumeToken(TokenType.ISTORE_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:317:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ISTORE_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:318:5
            consumeToken(TokenType.ISTORE_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:318:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ISTORE_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:319:5
            consumeToken(TokenType.ISTORE_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:319:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.D2F) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:320:5
            consumeToken(TokenType.D2F);
            // Code for CodeBlock specified at:
            // JasminParser.jj:320:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.D2I) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:321:5
            consumeToken(TokenType.D2I);
            // Code for CodeBlock specified at:
            // JasminParser.jj:321:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.D2L) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:322:5
            consumeToken(TokenType.D2L);
            // Code for CodeBlock specified at:
            // JasminParser.jj:322:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DADD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:323:5
            consumeToken(TokenType.DADD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:323:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:324:5
            consumeToken(TokenType.DALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:324:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:325:5
            consumeToken(TokenType.DASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:325:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DCMPG) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:326:5
            consumeToken(TokenType.DCMPG);
            // Code for CodeBlock specified at:
            // JasminParser.jj:326:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DCMPL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:327:5
            consumeToken(TokenType.DCMPL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:327:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DCONST_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:328:5
            consumeToken(TokenType.DCONST_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:328:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DCONST_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:329:5
            consumeToken(TokenType.DCONST_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:329:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DDIV) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:330:5
            consumeToken(TokenType.DDIV);
            // Code for CodeBlock specified at:
            // JasminParser.jj:330:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DLOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:331:5
            consumeToken(TokenType.DLOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:331:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:332:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:332:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.DLOAD_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:333:5
            consumeToken(TokenType.DLOAD_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:333:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DLOAD_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:334:5
            consumeToken(TokenType.DLOAD_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:334:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DLOAD_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:335:5
            consumeToken(TokenType.DLOAD_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:335:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DLOAD_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:336:5
            consumeToken(TokenType.DLOAD_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:336:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DMUL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:337:5
            consumeToken(TokenType.DMUL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:337:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DNEG) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:338:5
            consumeToken(TokenType.DNEG);
            // Code for CodeBlock specified at:
            // JasminParser.jj:338:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DREM) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:339:5
            consumeToken(TokenType.DREM);
            // Code for CodeBlock specified at:
            // JasminParser.jj:339:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DRETURN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:340:5
            consumeToken(TokenType.DRETURN);
            // Code for CodeBlock specified at:
            // JasminParser.jj:340:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DSTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:341:5
            consumeToken(TokenType.DSTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:341:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:342:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:342:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.DSTORE_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:343:5
            consumeToken(TokenType.DSTORE_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:343:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DSTORE_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:344:5
            consumeToken(TokenType.DSTORE_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:344:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DSTORE_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:345:5
            consumeToken(TokenType.DSTORE_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:345:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DSTORE_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:346:5
            consumeToken(TokenType.DSTORE_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:346:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DSUB) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:347:5
            consumeToken(TokenType.DSUB);
            // Code for CodeBlock specified at:
            // JasminParser.jj:347:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DUP) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:348:5
            consumeToken(TokenType.DUP);
            // Code for CodeBlock specified at:
            // JasminParser.jj:348:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DUP_X1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:349:5
            consumeToken(TokenType.DUP_X1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:349:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DUP_X2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:350:5
            consumeToken(TokenType.DUP_X2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:350:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DUP2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:351:5
            consumeToken(TokenType.DUP2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:351:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DUP2_X1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:352:5
            consumeToken(TokenType.DUP2_X1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:352:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.DUP2_X2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:353:5
            consumeToken(TokenType.DUP2_X2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:353:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.F2D) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:354:5
            consumeToken(TokenType.F2D);
            // Code for CodeBlock specified at:
            // JasminParser.jj:354:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:355:5
            consumeToken(TokenType.ALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:355:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:356:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:356:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.ILOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:357:5
            consumeToken(TokenType.ILOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:357:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:358:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:358:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.ILOAD_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:359:5
            consumeToken(TokenType.ILOAD_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:359:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ILOAD_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:360:5
            consumeToken(TokenType.ILOAD_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:360:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ILOAD_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:361:5
            consumeToken(TokenType.ILOAD_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:361:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ILOAD_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:362:5
            consumeToken(TokenType.ILOAD_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:362:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ACMPEQ) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:363:5
            consumeToken(TokenType.IF_ACMPEQ);
            // Code for CodeBlock specified at:
            // JasminParser.jj:363:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:364:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:364:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ACMPNE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:365:5
            consumeToken(TokenType.IF_ACMPNE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:365:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:366:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:366:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ICMPEQ) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:367:5
            consumeToken(TokenType.IF_ICMPEQ);
            // Code for CodeBlock specified at:
            // JasminParser.jj:367:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:368:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:368:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ICMPNE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:369:5
            consumeToken(TokenType.IF_ICMPNE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:369:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:370:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:370:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ICMPLT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:371:5
            consumeToken(TokenType.IF_ICMPLT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:371:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:372:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:372:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ICMPGE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:373:5
            consumeToken(TokenType.IF_ICMPGE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:373:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:374:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:374:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ICMPGT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:375:5
            consumeToken(TokenType.IF_ICMPGT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:375:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:376:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:376:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IF_ICMPLE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:377:5
            consumeToken(TokenType.IF_ICMPLE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:377:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:378:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:378:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFEQ) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:379:5
            consumeToken(TokenType.IFEQ);
            // Code for CodeBlock specified at:
            // JasminParser.jj:379:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:380:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:380:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFNE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:381:5
            consumeToken(TokenType.IFNE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:381:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:382:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:382:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFLT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:383:5
            consumeToken(TokenType.IFLT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:383:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:384:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:384:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFGE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:385:5
            consumeToken(TokenType.IFGE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:385:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:386:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:386:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFGT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:387:5
            consumeToken(TokenType.IFGT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:387:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:388:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:388:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFLE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:389:5
            consumeToken(TokenType.IFLE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:389:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:390:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:390:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFNONNULL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:391:5
            consumeToken(TokenType.IFNONNULL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:391:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:392:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:392:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IFNULL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:393:5
            consumeToken(TokenType.IFNULL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:393:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:394:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:394:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IADD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:395:5
            consumeToken(TokenType.IADD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:395:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IINC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:396:5
            consumeToken(TokenType.IINC);
            // Code for CodeBlock specified at:
            // JasminParser.jj:396:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:397:10
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:397:20
            jasmin.addOperandInst(getToken(0).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:398:10
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:398:20
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.INVOKEDYNAMIC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:399:5
            consumeToken(TokenType.INVOKEDYNAMIC);
            // Code for CodeBlock specified at:
            // JasminParser.jj:399:21
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.INVOKEINTERFACE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:400:5
            consumeToken(TokenType.INVOKEINTERFACE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:400:23
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.INVOKENONVIRTUAL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:401:5
            consumeToken(TokenType.INVOKENONVIRTUAL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:401:24
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for ZeroOrOne specified at:
            // JasminParser.jj:401:121
            if (nextTokenType()== TokenType.DOT||nextTokenType== TokenType.SLASH||nextTokenType== TokenType.LESS||nextTokenType== TokenType.IDENTIFIER) {
                // Code for NonTerminal specified at:
                // JasminParser.jj:401:122
                pushOntoCallStack("Instruction", "JasminParser.jj", 19470);
                try {
                    InvokeArgument();
                }
                finally {
                    popCallStack();
                }
            }
        }
        else if (nextTokenType()== TokenType.INVOKESPECIAL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:402:5
            consumeToken(TokenType.INVOKESPECIAL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:402:21
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for ZeroOrOne specified at:
            // JasminParser.jj:402:118
            if (nextTokenType()== TokenType.DOT||nextTokenType== TokenType.SLASH||nextTokenType== TokenType.LESS||nextTokenType== TokenType.IDENTIFIER) {
                // Code for NonTerminal specified at:
                // JasminParser.jj:402:119
                pushOntoCallStack("Instruction", "JasminParser.jj", 19608);
                try {
                    InvokeArgument();
                }
                finally {
                    popCallStack();
                }
            }
        }
        else if (nextTokenType()== TokenType.INVOKESTATIC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:403:5
            consumeToken(TokenType.INVOKESTATIC);
            // Code for CodeBlock specified at:
            // JasminParser.jj:403:20
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for ZeroOrOne specified at:
            // JasminParser.jj:403:117
            if (nextTokenType()== TokenType.DOT||nextTokenType== TokenType.SLASH||nextTokenType== TokenType.LESS||nextTokenType== TokenType.IDENTIFIER) {
                // Code for NonTerminal specified at:
                // JasminParser.jj:403:118
                pushOntoCallStack("Instruction", "JasminParser.jj", 19745);
                try {
                    InvokeArgument();
                }
                finally {
                    popCallStack();
                }
            }
        }
        else if (nextTokenType()== TokenType.INVOKEVIRTUAL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:404:5
            consumeToken(TokenType.INVOKEVIRTUAL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:404:21
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for ZeroOrOne specified at:
            // JasminParser.jj:404:118
            if (nextTokenType()== TokenType.DOT||nextTokenType== TokenType.SLASH||nextTokenType== TokenType.LESS||nextTokenType== TokenType.IDENTIFIER) {
                // Code for NonTerminal specified at:
                // JasminParser.jj:404:119
                pushOntoCallStack("Instruction", "JasminParser.jj", 19882);
                try {
                    InvokeArgument();
                }
                finally {
                    popCallStack();
                }
            }
        }
        else if (nextTokenType()== TokenType.GO_TO) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:405:5
            consumeToken(TokenType.GO_TO);
            // Code for CodeBlock specified at:
            // JasminParser.jj:405:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:406:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:406:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.GO_TO_W) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:407:5
            consumeToken(TokenType.GO_TO_W);
            // Code for CodeBlock specified at:
            // JasminParser.jj:407:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:408:9
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:408:22
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.F2I) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:409:5
            consumeToken(TokenType.F2I);
            // Code for CodeBlock specified at:
            // JasminParser.jj:409:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.F2L) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:410:5
            consumeToken(TokenType.F2L);
            // Code for CodeBlock specified at:
            // JasminParser.jj:410:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FADD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:411:5
            consumeToken(TokenType.FADD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:411:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:412:5
            consumeToken(TokenType.FALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:412:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:413:5
            consumeToken(TokenType.FASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:413:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FCMPG) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:414:5
            consumeToken(TokenType.FCMPG);
            // Code for CodeBlock specified at:
            // JasminParser.jj:414:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FCMPL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:415:5
            consumeToken(TokenType.FCMPL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:415:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FCONST) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:416:5
            consumeToken(TokenType.FCONST);
            // Code for CodeBlock specified at:
            // JasminParser.jj:416:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:417:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:417:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.FCONST_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:418:5
            consumeToken(TokenType.FCONST_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:418:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FCONST_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:419:5
            consumeToken(TokenType.FCONST_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:419:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FCONST_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:420:5
            consumeToken(TokenType.FCONST_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:420:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FCONST_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:421:5
            consumeToken(TokenType.FCONST_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:421:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FDIV) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:422:5
            consumeToken(TokenType.FDIV);
            // Code for CodeBlock specified at:
            // JasminParser.jj:422:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FLOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:423:5
            consumeToken(TokenType.FLOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:423:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:424:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:424:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.FLOAD_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:425:5
            consumeToken(TokenType.FLOAD_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:425:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FLOAD_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:426:5
            consumeToken(TokenType.FLOAD_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:426:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FLOAD_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:427:5
            consumeToken(TokenType.FLOAD_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:427:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FLOAD_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:428:5
            consumeToken(TokenType.FLOAD_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:428:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FMUL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:429:5
            consumeToken(TokenType.FMUL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:429:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FNEG) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:430:5
            consumeToken(TokenType.FNEG);
            // Code for CodeBlock specified at:
            // JasminParser.jj:430:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FREM) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:431:5
            consumeToken(TokenType.FREM);
            // Code for CodeBlock specified at:
            // JasminParser.jj:431:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FRETURN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:432:5
            consumeToken(TokenType.FRETURN);
            // Code for CodeBlock specified at:
            // JasminParser.jj:432:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FSTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:433:5
            consumeToken(TokenType.FSTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:433:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:434:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:434:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.FSTORE_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:435:5
            consumeToken(TokenType.FSTORE_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:435:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FSTORE_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:436:5
            consumeToken(TokenType.FSTORE_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:436:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FSTORE_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:437:5
            consumeToken(TokenType.FSTORE_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:437:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FSTORE_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:438:5
            consumeToken(TokenType.FSTORE_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:438:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.FSUB) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:439:5
            consumeToken(TokenType.FSUB);
            // Code for CodeBlock specified at:
            // JasminParser.jj:439:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.I2B) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:440:5
            consumeToken(TokenType.I2B);
            // Code for CodeBlock specified at:
            // JasminParser.jj:440:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.I2C) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:441:5
            consumeToken(TokenType.I2C);
            // Code for CodeBlock specified at:
            // JasminParser.jj:441:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.I2D) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:442:5
            consumeToken(TokenType.I2D);
            // Code for CodeBlock specified at:
            // JasminParser.jj:442:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.I2F) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:443:5
            consumeToken(TokenType.I2F);
            // Code for CodeBlock specified at:
            // JasminParser.jj:443:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.I2L) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:444:5
            consumeToken(TokenType.I2L);
            // Code for CodeBlock specified at:
            // JasminParser.jj:444:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.I2S) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:445:5
            consumeToken(TokenType.I2S);
            // Code for CodeBlock specified at:
            // JasminParser.jj:445:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:446:5
            consumeToken(TokenType.IALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:446:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IAND) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:447:5
            consumeToken(TokenType.IAND);
            // Code for CodeBlock specified at:
            // JasminParser.jj:447:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:448:5
            consumeToken(TokenType.IASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:448:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IDIV) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:449:5
            consumeToken(TokenType.IDIV);
            // Code for CodeBlock specified at:
            // JasminParser.jj:449:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.INEG) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:450:5
            consumeToken(TokenType.INEG);
            // Code for CodeBlock specified at:
            // JasminParser.jj:450:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IMUL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:451:5
            consumeToken(TokenType.IMUL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:451:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.RETURN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:452:5
            consumeToken(TokenType.RETURN);
            // Code for CodeBlock specified at:
            // JasminParser.jj:452:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ARETURN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:453:5
            consumeToken(TokenType.ARETURN);
            // Code for CodeBlock specified at:
            // JasminParser.jj:453:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IRETURN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:454:5
            consumeToken(TokenType.IRETURN);
            // Code for CodeBlock specified at:
            // JasminParser.jj:454:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.INSTANCEOF) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:455:5
            consumeToken(TokenType.INSTANCEOF);
            // Code for CodeBlock specified at:
            // JasminParser.jj:455:18
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IOR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:456:5
            consumeToken(TokenType.IOR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:456:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IREM) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:457:5
            consumeToken(TokenType.IREM);
            // Code for CodeBlock specified at:
            // JasminParser.jj:457:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ISHL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:458:5
            consumeToken(TokenType.ISHL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:458:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ISHR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:459:5
            consumeToken(TokenType.ISHR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:459:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ISTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:460:5
            consumeToken(TokenType.ISTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:460:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.ISUB) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:461:5
            consumeToken(TokenType.ISUB);
            // Code for CodeBlock specified at:
            // JasminParser.jj:461:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IUSHR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:462:5
            consumeToken(TokenType.IUSHR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:462:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.IXOR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:463:5
            consumeToken(TokenType.IXOR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:463:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.JSR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:464:5
            consumeToken(TokenType.JSR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:464:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.JSR_W) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:465:5
            consumeToken(TokenType.JSR_W);
            // Code for CodeBlock specified at:
            // JasminParser.jj:465:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.L2D) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:466:5
            consumeToken(TokenType.L2D);
            // Code for CodeBlock specified at:
            // JasminParser.jj:466:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.L2F) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:467:5
            consumeToken(TokenType.L2F);
            // Code for CodeBlock specified at:
            // JasminParser.jj:467:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.L2I) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:468:5
            consumeToken(TokenType.L2I);
            // Code for CodeBlock specified at:
            // JasminParser.jj:468:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LADD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:469:5
            consumeToken(TokenType.LADD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:469:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:470:5
            consumeToken(TokenType.LALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:470:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LAND) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:471:5
            consumeToken(TokenType.LAND);
            // Code for CodeBlock specified at:
            // JasminParser.jj:471:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:472:5
            consumeToken(TokenType.LASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:472:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LCMP) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:473:5
            consumeToken(TokenType.LCMP);
            // Code for CodeBlock specified at:
            // JasminParser.jj:473:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LCONST_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:474:5
            consumeToken(TokenType.LCONST_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:474:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LCONST_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:475:5
            consumeToken(TokenType.LCONST_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:475:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LDC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:476:5
            consumeToken(TokenType.LDC);
            // Code for CodeBlock specified at:
            // JasminParser.jj:476:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LDC_W) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:477:5
            consumeToken(TokenType.LDC_W);
            // Code for CodeBlock specified at:
            // JasminParser.jj:477:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LDC2_W) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:478:5
            consumeToken(TokenType.LDC2_W);
            // Code for CodeBlock specified at:
            // JasminParser.jj:478:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LDIV) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:479:5
            consumeToken(TokenType.LDIV);
            // Code for CodeBlock specified at:
            // JasminParser.jj:479:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LLOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:480:5
            consumeToken(TokenType.LLOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:480:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LLOAD_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:481:5
            consumeToken(TokenType.LLOAD_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:481:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LLOAD_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:482:5
            consumeToken(TokenType.LLOAD_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:482:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LLOAD_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:483:5
            consumeToken(TokenType.LLOAD_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:483:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LLOAD_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:484:5
            consumeToken(TokenType.LLOAD_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:484:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LMUL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:485:5
            consumeToken(TokenType.LMUL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:485:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LNEG) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:486:5
            consumeToken(TokenType.LNEG);
            // Code for CodeBlock specified at:
            // JasminParser.jj:486:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LDIV) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:487:5
            consumeToken(TokenType.LDIV);
            // Code for CodeBlock specified at:
            // JasminParser.jj:487:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LOOKUPSWITCH) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:488:5
            consumeToken(TokenType.LOOKUPSWITCH);
            // Code for CodeBlock specified at:
            // JasminParser.jj:488:20
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:489:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:489:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.LOR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:490:5
            consumeToken(TokenType.LOR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:490:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LREM) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:491:5
            consumeToken(TokenType.LREM);
            // Code for CodeBlock specified at:
            // JasminParser.jj:491:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LDIV) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:492:5
            consumeToken(TokenType.LDIV);
            // Code for CodeBlock specified at:
            // JasminParser.jj:492:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LRETURN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:493:5
            consumeToken(TokenType.LRETURN);
            // Code for CodeBlock specified at:
            // JasminParser.jj:493:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LSHL) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:494:5
            consumeToken(TokenType.LSHL);
            // Code for CodeBlock specified at:
            // JasminParser.jj:494:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LSHR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:495:5
            consumeToken(TokenType.LSHR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:495:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LSTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:496:5
            consumeToken(TokenType.LSTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:496:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:497:9
            consumeToken(TokenType.LONG);
            // Code for CodeBlock specified at:
            // JasminParser.jj:497:16
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.LSTORE_0) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:498:5
            consumeToken(TokenType.LSTORE_0);
            // Code for CodeBlock specified at:
            // JasminParser.jj:498:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LSTORE_1) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:499:5
            consumeToken(TokenType.LSTORE_1);
            // Code for CodeBlock specified at:
            // JasminParser.jj:499:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LSTORE_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:500:5
            consumeToken(TokenType.LSTORE_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:500:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LSTORE_3) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:501:5
            consumeToken(TokenType.LSTORE_3);
            // Code for CodeBlock specified at:
            // JasminParser.jj:501:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LSUB) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:502:5
            consumeToken(TokenType.LSUB);
            // Code for CodeBlock specified at:
            // JasminParser.jj:502:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LUSHR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:503:5
            consumeToken(TokenType.LUSHR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:503:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.LXOR) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:504:5
            consumeToken(TokenType.LXOR);
            // Code for CodeBlock specified at:
            // JasminParser.jj:504:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.MONITORENTER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:505:5
            consumeToken(TokenType.MONITORENTER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:505:20
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.MONITOREXIT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:506:5
            consumeToken(TokenType.MONITOREXIT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:506:19
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.MULTIANEWARRAY) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:507:5
            consumeToken(TokenType.MULTIANEWARRAY);
            // Code for CodeBlock specified at:
            // JasminParser.jj:507:22
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.NOP) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:508:5
            consumeToken(TokenType.NOP);
            // Code for CodeBlock specified at:
            // JasminParser.jj:508:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.POP) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:509:5
            consumeToken(TokenType.POP);
            // Code for CodeBlock specified at:
            // JasminParser.jj:509:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.POP_2) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:510:5
            consumeToken(TokenType.POP_2);
            // Code for CodeBlock specified at:
            // JasminParser.jj:510:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.GETFIELD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:511:5
            consumeToken(TokenType.GETFIELD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:511:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:511:114
            pushOntoCallStack("Instruction", "JasminParser.jj", 31612);
            try {
                FieldInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.GETSTATIC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:512:5
            consumeToken(TokenType.GETSTATIC);
            // Code for CodeBlock specified at:
            // JasminParser.jj:512:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:512:115
            pushOntoCallStack("Instruction", "JasminParser.jj", 31740);
            try {
                FieldInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.PUTFIELD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:513:5
            consumeToken(TokenType.PUTFIELD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:513:16
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:513:114
            pushOntoCallStack("Instruction", "JasminParser.jj", 31867);
            try {
                FieldInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.PUTSTATIC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:514:5
            consumeToken(TokenType.PUTSTATIC);
            // Code for CodeBlock specified at:
            // JasminParser.jj:514:17
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for NonTerminal specified at:
            // JasminParser.jj:514:115
            pushOntoCallStack("Instruction", "JasminParser.jj", 31995);
            try {
                FieldInst();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.RET) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:515:5
            consumeToken(TokenType.RET);
            // Code for CodeBlock specified at:
            // JasminParser.jj:515:11
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.SALOAD) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:516:5
            consumeToken(TokenType.SALOAD);
            // Code for CodeBlock specified at:
            // JasminParser.jj:516:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.SASTORE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:517:5
            consumeToken(TokenType.SASTORE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:517:15
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.SIPUSH) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:518:5
            consumeToken(TokenType.SIPUSH);
            // Code for CodeBlock specified at:
            // JasminParser.jj:518:14
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.SWAP) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:519:5
            consumeToken(TokenType.SWAP);
            // Code for CodeBlock specified at:
            // JasminParser.jj:519:12
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else if (nextTokenType()== TokenType.TABLESWITCH) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:520:5
            consumeToken(TokenType.TABLESWITCH);
            // Code for CodeBlock specified at:
            // JasminParser.jj:520:19
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:521:9
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:521:19
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.WIDE) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:522:5
            consumeToken(TokenType.WIDE);
            // Code for CodeBlock specified at:
            // JasminParser.jj:522:13
            jasmin.addInstruction(getToken(0).getImage(), getToken(-1).getImage(), getToken(-2).getImage());
        }
        else  {
            pushOntoCallStack("Instruction", "JasminParser.jj", 7604);
            throw new ParseException(this, Instruction_FIRST_SET, parsingStack);
        }
    }

    // JasminParser.jj:528:1
    final public void Label() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Label";
        // Code for RegexpRef specified at:
        // JasminParser.jj:529:5
        consumeToken(TokenType.IDENTIFIER);
        // Code for RegexpRef specified at:
        // JasminParser.jj:529:18
        consumeToken(TokenType.DOUBLE_DOT);
    }

    // JasminParser.jj:531:1
    final public void Path1() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Path1";
        // Code for RegexpRef specified at:
        // JasminParser.jj:532:5
        consumeToken(TokenType.IDENTIFIER);
        if (nextTokenType()== TokenType.SLASH) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:532:19
            consumeToken(TokenType.SLASH);
        }
        else if (nextTokenType()== TokenType.DOT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:532:29
            consumeToken(TokenType.DOT);
        }
        else  {
            pushOntoCallStack("Path1", "JasminParser.jj", 32931);
            throw new ParseException(this, first_set$JasminParser_jj$532$19, parsingStack);
        }
        if (nextTokenType()== TokenType.IDENTIFIER) {
            // Code for NonTerminal specified at:
            // JasminParser.jj:532:38
            pushOntoCallStack("Path1", "JasminParser.jj", 32950);
            try {
                Path1();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.LESS||nextTokenType== TokenType.IDENTIFIER) {
            // Code for NonTerminal specified at:
            // JasminParser.jj:532:48
            pushOntoCallStack("Path1", "JasminParser.jj", 32960);
            try {
                MethodName();
            }
            finally {
                popCallStack();
            }
            // Code for NonTerminal specified at:
            // JasminParser.jj:532:61
            pushOntoCallStack("Path1", "JasminParser.jj", 32973);
            try {
                MethodArguments();
            }
            finally {
                popCallStack();
            }
        }
        else  {
            pushOntoCallStack("Path1", "JasminParser.jj", 32949);
            throw new ParseException(this, first_set$JasminParser_jj$532$37, parsingStack);
        }
    }

    // JasminParser.jj:534:1
    final public void MethodDeclaration() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MethodDeclaration";
        // Code for NonTerminal specified at:
        // JasminParser.jj:535:6
        pushOntoCallStack("MethodDeclaration", "JasminParser.jj", 33018);
        try {
            StartMethod();
        }
        finally {
            popCallStack();
        }
        // Code for NonTerminal specified at:
        // JasminParser.jj:535:21
        pushOntoCallStack("MethodDeclaration", "JasminParser.jj", 33033);
        try {
            MethodName();
        }
        finally {
            popCallStack();
        }
        // Code for CodeBlock specified at:
        // JasminParser.jj:535:33
        if (getToken(0).getImage().equals(">")) jasmin.setMethodName("<init>");
        else jasmin.setMethodName(getToken(0).getImage());
        // Code for NonTerminal specified at:
        // JasminParser.jj:537:7
        pushOntoCallStack("MethodDeclaration", "JasminParser.jj", 33179);
        try {
            MethodArguments();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:537:24
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:537:25
            consumeToken(TokenType.LINE_COMMENT);
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:537:42
        while (true) {
            if (!(first_set$JasminParser_jj$537$43.contains(nextTokenType()))) break;
            // Code for NonTerminal specified at:
            // JasminParser.jj:537:43
            pushOntoCallStack("MethodDeclaration", "JasminParser.jj", 33215);
            try {
                MethodBody();
            }
            finally {
                popCallStack();
            }
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:537:56
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:537:57
            consumeToken(TokenType.LINE_COMMENT);
        }
        // Code for NonTerminal specified at:
        // JasminParser.jj:537:74
        pushOntoCallStack("MethodDeclaration", "JasminParser.jj", 33246);
        try {
            EndMethod();
        }
        finally {
            popCallStack();
        }
    }

    // JasminParser.jj:539:1
    final public void StartMethod() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StartMethod";
        // Code for RegexpRef specified at:
        // JasminParser.jj:540:5
        consumeToken(TokenType.DOT_METHOD);
        // Code for RegexpRef specified at:
        // JasminParser.jj:540:18
        consumeToken(TokenType.PUBLIC);
        // Code for CodeBlock specified at:
        // JasminParser.jj:540:27
        jasmin.setMethodAccessModifier(getToken(0).getImage());
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:541:6
        if (nextTokenType()== TokenType.STATIC) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:541:7
            consumeToken(TokenType.STATIC);
        }
        // Code for CodeBlock specified at:
        // JasminParser.jj:541:18
        if (getToken(0).getImage().equals("static")) jasmin.setMethodStatic();
    }

    // JasminParser.jj:544:1
    final public void MethodName() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MethodName";
        if (nextTokenType()== TokenType.LESS) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:545:6
            consumeToken(TokenType.LESS);
            // Code for RegexpRef specified at:
            // JasminParser.jj:545:13
            consumeToken(TokenType.IDENTIFIER);
            // Code for RegexpRef specified at:
            // JasminParser.jj:545:26
            consumeToken(TokenType.GREAT);
        }
        else if (nextTokenType()== TokenType.IDENTIFIER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:546:5
            consumeToken(TokenType.IDENTIFIER);
        }
        else  {
            pushOntoCallStack("MethodName", "JasminParser.jj", 33464);
            throw new ParseException(this, first_set$JasminParser_jj$545$6, parsingStack);
        }
    }

    // JasminParser.jj:548:1
    final public void MethodArguments() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MethodArguments";
        // Code for RegexpRef specified at:
        // JasminParser.jj:549:5
        consumeToken(TokenType.OPEN_PAREN);
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:549:18
        while (true) {
            if (!(nextTokenType()== TokenType.INT)) break;
            // Code for NonTerminal specified at:
            // JasminParser.jj:549:19
            pushOntoCallStack("MethodArguments", "JasminParser.jj", 33548);
            try {
                MethodArgumentNormalType();
            }
            finally {
                popCallStack();
            }
        }
        // Code for NonTerminal specified at:
        // JasminParser.jj:549:47
        pushOntoCallStack("MethodArguments", "JasminParser.jj", 33576);
        try {
            MethodArgumentArrayType();
        }
        finally {
            popCallStack();
        }
        if (nextTokenType()== TokenType.CLOSE_PAREN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:550:6
            consumeToken(TokenType.CLOSE_PAREN);
            if (nextTokenType()== TokenType.INT||nextTokenType== TokenType.VOID) {
                // Code for NonTerminal specified at:
                // JasminParser.jj:550:22
                pushOntoCallStack("MethodArguments", "JasminParser.jj", 33622);
                try {
                    ReturnTypeNormalType();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                // Code for NonTerminal specified at:
                // JasminParser.jj:550:45
                pushOntoCallStack("MethodArguments", "JasminParser.jj", 33645);
                try {
                    ReturnArray();
                }
                finally {
                    popCallStack();
                }
            }
        }
        else if (nextTokenType()== TokenType.LINE_COMMENT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:550:60
            consumeToken(TokenType.LINE_COMMENT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:550:75
            jasmin.setParameter(getToken(0).getImage());
        }
        else  {
            pushOntoCallStack("MethodArguments", "JasminParser.jj", 33606);
            throw new ParseException(this, first_set$JasminParser_jj$550$6, parsingStack);
        }
    }

    // JasminParser.jj:552:1
    final public void MethodArgumentNormalType() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MethodArgumentNormalType";
        // Code for RegexpRef specified at:
        // JasminParser.jj:553:5
        consumeToken(TokenType.INT);
        // Code for CodeBlock specified at:
        // JasminParser.jj:553:11
        jasmin.setParameter(getToken(0).getImage());
    }

    // JasminParser.jj:555:1
    final public void MethodArgumentArrayType() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MethodArgumentArrayType";
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:556:5
        if (nextTokenType()== TokenType.ARRAY_IDENTIFIER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:556:6
            consumeToken(TokenType.ARRAY_IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:556:24
            jasmin.setParameter(getToken(0).getImage());
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:557:7
        while (true) {
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:557:8
            if (nextTokenType()== TokenType.IDENTIFIER) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:557:8
                consumeToken(TokenType.IDENTIFIER);
                // Code for CodeBlock specified at:
                // JasminParser.jj:557:21
                jasmin.setParameter(getToken(0).getImage());
            }
            else if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:558:10
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:558:17
                jasmin.setParameter(getToken(0).getImage());
            }
            else  {
                break;
            }
        }
    }

    static private final EnumSet<TokenType> ReturnTypeNormalType_FIRST_SET= tokenTypeSet(TokenType.INT, TokenType.VOID);
    // JasminParser.jj:560:1
    final public void ReturnTypeNormalType() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ReturnTypeNormalType";
        // Code for ExpansionChoice specified at:
        // JasminParser.jj:561:5
        if (nextTokenType()== TokenType.INT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:561:5
            consumeToken(TokenType.INT);
        }
        else if (nextTokenType()== TokenType.VOID) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:561:13
            consumeToken(TokenType.VOID);
        }
        else  {
            pushOntoCallStack("ReturnTypeNormalType", "JasminParser.jj", 34067);
            throw new ParseException(this, ReturnTypeNormalType_FIRST_SET, parsingStack);
        }
    }

    // JasminParser.jj:563:1
    final public void ReturnArray() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ReturnArray";
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:564:5
        if (nextTokenType()== TokenType.ARRAY_IDENTIFIER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:564:6
            consumeToken(TokenType.ARRAY_IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:564:25
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:565:5
        while (true) {
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:565:6
            if (nextTokenType()== TokenType.IDENTIFIER) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:565:6
                consumeToken(TokenType.IDENTIFIER);
                // Code for CodeBlock specified at:
                // JasminParser.jj:565:19
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:566:5
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:566:13
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else  {
                break;
            }
        }
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:567:5
        if (nextTokenType()== TokenType.LINE_COMMENT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:567:6
            consumeToken(TokenType.LINE_COMMENT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:567:21
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
    }

    // JasminParser.jj:569:1
    final public void MethodBody() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MethodBody";
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:570:5
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:570:6
            consumeToken(TokenType.LINE_COMMENT);
        }
        if (first_set$JasminParser_jj$570$24.contains(nextTokenType())) {
            // Code for NonTerminal specified at:
            // JasminParser.jj:570:24
            pushOntoCallStack("MethodBody", "JasminParser.jj", 34431);
            try {
                Instruction();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.LIMIT) {
            // Code for NonTerminal specified at:
            // JasminParser.jj:570:37
            pushOntoCallStack("MethodBody", "JasminParser.jj", 34444);
            try {
                LimitInstructions();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TokenType.IDENTIFIER) {
            // Code for NonTerminal specified at:
            // JasminParser.jj:570:56
            pushOntoCallStack("MethodBody", "JasminParser.jj", 34463);
            try {
                Label();
            }
            finally {
                popCallStack();
            }
        }
        else  {
            pushOntoCallStack("MethodBody", "JasminParser.jj", 34431);
            throw new ParseException(this, first_set$JasminParser_jj$570$24$, parsingStack);
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:570:63
        while (true) {
            if (!(nextTokenType()== TokenType.LINE_COMMENT)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:570:64
            consumeToken(TokenType.LINE_COMMENT);
        }
    }

    // JasminParser.jj:572:1
    final public void InvokeMethodName() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "InvokeMethodName";
        if (nextTokenType()== TokenType.LESS) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:573:6
            consumeToken(TokenType.LESS);
            // Code for CodeBlock specified at:
            // JasminParser.jj:573:13
            jasmin.addOperandInstPath(getToken(0).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:574:5
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:574:18
            jasmin.addOperandInstPath(getToken(0).getImage());
            // Code for RegexpRef specified at:
            // JasminParser.jj:575:5
            consumeToken(TokenType.GREAT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:575:13
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.IDENTIFIER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:576:5
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:576:18
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
        else  {
            pushOntoCallStack("InvokeMethodName", "JasminParser.jj", 34514);
            throw new ParseException(this, first_set$JasminParser_jj$573$6, parsingStack);
        }
    }

    // JasminParser.jj:578:1
    final public void InvokeArgument() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "InvokeArgument";
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:579:5
        while (true) {
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:579:6
            if (nextTokenType()== TokenType.IDENTIFIER) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:579:6
                consumeToken(TokenType.IDENTIFIER);
                // Code for CodeBlock specified at:
                // JasminParser.jj:579:19
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:580:5
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:580:13
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else  {
                break;
            }
        }
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:581:5
        if (nextTokenType()== TokenType.DOT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:581:6
            consumeToken(TokenType.DOT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:581:12
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
        // Code for NonTerminal specified at:
        // JasminParser.jj:582:6
        pushOntoCallStack("InvokeArgument", "JasminParser.jj", 35020);
        try {
            InvokeMethodName();
        }
        finally {
            popCallStack();
        }
        // Code for NonTerminal specified at:
        // JasminParser.jj:582:25
        pushOntoCallStack("InvokeArgument", "JasminParser.jj", 35039);
        try {
            InvokeMethodArguments();
        }
        finally {
            popCallStack();
        }
    }

    // JasminParser.jj:584:1
    final public void InvokeMethodArguments() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "InvokeMethodArguments";
        // Code for RegexpRef specified at:
        // JasminParser.jj:585:5
        consumeToken(TokenType.OPEN_PAREN);
        // Code for CodeBlock specified at:
        // JasminParser.jj:585:18
        jasmin.addOperandInstPath(getToken(0).getImage());
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:586:5
        while (true) {
            if (!(nextTokenType()== TokenType.INT)) break;
            // Code for NonTerminal specified at:
            // JasminParser.jj:586:6
            pushOntoCallStack("InvokeMethodArguments", "JasminParser.jj", 35163);
            try {
                InvokeMethodArgumentNormalType();
            }
            finally {
                popCallStack();
            }
        }
        // Code for NonTerminal specified at:
        // JasminParser.jj:587:6
        pushOntoCallStack("InvokeMethodArguments", "JasminParser.jj", 35202);
        try {
            InvokeMethodArgumentArrayType();
        }
        finally {
            popCallStack();
        }
        if (nextTokenType()== TokenType.CLOSE_PAREN) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:588:6
            consumeToken(TokenType.CLOSE_PAREN);
            // Code for CodeBlock specified at:
            // JasminParser.jj:588:20
            jasmin.addOperandInstPath(getToken(0).getImage());
            if (nextTokenType()== TokenType.INT||nextTokenType== TokenType.VOID) {
                // Code for NonTerminal specified at:
                // JasminParser.jj:589:6
                pushOntoCallStack("InvokeMethodArguments", "JasminParser.jj", 35312);
                try {
                    ReturnTypeNormalType();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at:
                // JasminParser.jj:589:27
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else  {
                // Code for NonTerminal specified at:
                // JasminParser.jj:589:83
                pushOntoCallStack("InvokeMethodArguments", "JasminParser.jj", 35389);
                try {
                    ReturnArray();
                }
                finally {
                    popCallStack();
                }
            }
        }
        else if (nextTokenType()== TokenType.LINE_COMMENT) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:590:5
            consumeToken(TokenType.LINE_COMMENT);
            // Code for CodeBlock specified at:
            // JasminParser.jj:590:20
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
        else  {
            pushOntoCallStack("InvokeMethodArguments", "JasminParser.jj", 35238);
            throw new ParseException(this, first_set$JasminParser_jj$588$6, parsingStack);
        }
    }

    // JasminParser.jj:592:1
    final public void InvokeMethodArgumentNormalType() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "InvokeMethodArgumentNormalType";
        // Code for RegexpRef specified at:
        // JasminParser.jj:593:5
        consumeToken(TokenType.INT);
        // Code for CodeBlock specified at:
        // JasminParser.jj:593:11
        jasmin.addOperandInstPath(getToken(0).getImage());
    }

    // JasminParser.jj:595:1
    final public void InvokeMethodArgumentArrayType() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "InvokeMethodArgumentArrayType";
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:596:5
        if (nextTokenType()== TokenType.ARRAY_IDENTIFIER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:596:6
            consumeToken(TokenType.ARRAY_IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:596:25
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:597:7
        while (true) {
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:597:8
            if (nextTokenType()== TokenType.IDENTIFIER) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:597:8
                consumeToken(TokenType.IDENTIFIER);
                // Code for CodeBlock specified at:
                // JasminParser.jj:597:21
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:598:10
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:598:18
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else  {
                break;
            }
        }
    }

    // JasminParser.jj:600:1
    final public void NewInst() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "NewInst";
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:601:5
        while (true) {
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:601:6
            if (nextTokenType()== TokenType.IDENTIFIER) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:601:6
                consumeToken(TokenType.IDENTIFIER);
                // Code for CodeBlock specified at:
                // JasminParser.jj:601:19
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:602:5
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:602:13
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else  {
                break;
            }
        }
    }

    // JasminParser.jj:604:1
    final public void LdcInst() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "LdcInst";
        if (nextTokenType()== TokenType.QUOTED) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:605:6
            consumeToken(TokenType.QUOTED);
            // Code for CodeBlock specified at:
            // JasminParser.jj:605:15
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.INTEGER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:606:8
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:606:18
            jasmin.addOperandInst(getToken(0).getImage());
        }
        else  {
            pushOntoCallStack("LdcInst", "JasminParser.jj", 36006);
            throw new ParseException(this, first_set$JasminParser_jj$605$6, parsingStack);
        }
    }

    // JasminParser.jj:608:1
    final public void CheckCastInst() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CheckCastInst";
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:609:5
        while (true) {
            if (!(nextTokenType()== TokenType.IDENTIFIER)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:609:6
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:609:19
            jasmin.addOperandInstPath(getToken(0).getImage());
            // Code for ZeroOrOne specified at:
            // JasminParser.jj:610:5
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:610:6
            if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:610:6
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:610:14
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else if (nextTokenType()== TokenType.DOT) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:611:5
                consumeToken(TokenType.DOT);
                // Code for CodeBlock specified at:
                // JasminParser.jj:611:11
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
        }
    }

    // JasminParser.jj:613:1
    final public void NewArrayInst() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "NewArrayInst";
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:614:5
        if (nextTokenType()== TokenType.ARRAY_IDENTIFIER) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:614:6
            consumeToken(TokenType.ARRAY_IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:614:25
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:615:5
        while (true) {
            if (!(nextTokenType()== TokenType.IDENTIFIER)) break;
            // Code for RegexpRef specified at:
            // JasminParser.jj:615:6
            consumeToken(TokenType.IDENTIFIER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:615:19
            jasmin.addOperandInstPath(getToken(0).getImage());
            // Code for ZeroOrOne specified at:
            // JasminParser.jj:616:5
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:616:6
            if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:616:6
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:616:14
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else if (nextTokenType()== TokenType.DOT) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:616:67
                consumeToken(TokenType.DOT);
                // Code for CodeBlock specified at:
                // JasminParser.jj:616:73
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
        }
        // Code for ZeroOrOne specified at:
        // JasminParser.jj:617:5
        if (nextTokenType()== TokenType.SEMICOLON) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:617:6
            consumeToken(TokenType.SEMICOLON);
            // Code for CodeBlock specified at:
            // JasminParser.jj:617:18
            jasmin.addOperandInstPath(getToken(0).getImage());
        }
    }

    // JasminParser.jj:619:1
    final public void FieldInst() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "FieldInst";
        // Code for ZeroOrMore specified at:
        // JasminParser.jj:620:5
        while (true) {
            // Code for ExpansionChoice specified at:
            // JasminParser.jj:620:6
            if (nextTokenType()== TokenType.IDENTIFIER) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:620:6
                consumeToken(TokenType.IDENTIFIER);
                // Code for CodeBlock specified at:
                // JasminParser.jj:620:19
                if (getToken(0).getImage().equals("Ljava")||getToken(0).getImage().equals("java")) jasmin.addOperandInstPath(" "+getToken(0).getImage());
                else jasmin.addOperandInstPath(getToken(0).getImage());
                // Code for ZeroOrOne specified at:
                // JasminParser.jj:623:5
                if (nextTokenType()== TokenType.DOT) {
                    // Code for RegexpRef specified at:
                    // JasminParser.jj:623:6
                    consumeToken(TokenType.DOT);
                    // Code for CodeBlock specified at:
                    // JasminParser.jj:623:12
                    jasmin.addOperandInstPath(getToken(0).getImage());
                }
            }
            else if (nextTokenType()== TokenType.SLASH) {
                // Code for RegexpRef specified at:
                // JasminParser.jj:624:5
                consumeToken(TokenType.SLASH);
                // Code for CodeBlock specified at:
                // JasminParser.jj:624:13
                jasmin.addOperandInstPath(getToken(0).getImage());
            }
            else  {
                break;
            }
        }
    }

    // JasminParser.jj:626:1
    final public void LimitInstructions() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "LimitInstructions";
        // Code for RegexpRef specified at:
        // JasminParser.jj:627:5
        consumeToken(TokenType.LIMIT);
        // Code for NonTerminal specified at:
        // JasminParser.jj:627:13
        pushOntoCallStack("LimitInstructions", "JasminParser.jj", 37136);
        try {
            LimitStatementFactorization();
        }
        finally {
            popCallStack();
        }
    }

    static private final EnumSet<TokenType> LimitStatementFactorization_FIRST_SET= tokenTypeSet(TokenType.LOCALS, TokenType.STACK);
    // JasminParser.jj:629:1
    final public void LimitStatementFactorization() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "LimitStatementFactorization";
        // Code for ExpansionChoice specified at:
        // JasminParser.jj:630:5
        if (nextTokenType()== TokenType.STACK) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:630:5
            consumeToken(TokenType.STACK);
            // Code for RegexpRef specified at:
            // JasminParser.jj:630:13
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:630:23
            jasmin.setStack(getToken(0).getImage());
        }
        else if (nextTokenType()== TokenType.LOCALS) {
            // Code for RegexpRef specified at:
            // JasminParser.jj:632:5
            consumeToken(TokenType.LOCALS);
            // Code for RegexpRef specified at:
            // JasminParser.jj:632:14
            consumeToken(TokenType.INTEGER);
            // Code for CodeBlock specified at:
            // JasminParser.jj:632:24
            jasmin.setLocals(getToken(0).getImage());
        }
        else  {
            pushOntoCallStack("LimitStatementFactorization", "JasminParser.jj", 37199);
            throw new ParseException(this, LimitStatementFactorization_FIRST_SET, parsingStack);
        }
    }

    // JasminParser.jj:634:1
    final public void EndMethod() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "EndMethod";
        // Code for RegexpRef specified at:
        // JasminParser.jj:635:9
        consumeToken(TokenType.END);
        // Code for RegexpRef specified at:
        // JasminParser.jj:635:15
        consumeToken(TokenType.METHOD);
    }

    static private final EnumSet<TokenType> first_set$JasminParser_jj$532$19= tokenTypeSet(TokenType.DOT, TokenType.SLASH);
    static private final EnumSet<TokenType> first_set$JasminParser_jj$532$37= tokenTypeSet(TokenType.LESS, TokenType.IDENTIFIER);
    static private final EnumSet<TokenType> first_set$JasminParser_jj$537$43= first_set$JasminParser_jj$537$43_init();
    static private EnumSet<TokenType> first_set$JasminParser_jj$537$43_init() {
        return tokenTypeSet(TokenType.LINE_COMMENT, TokenType.LIMIT, TokenType.GO_TO, TokenType.GO_TO_W, TokenType.A_NEW_ARRAY, TokenType.ARRAY_LENGTH, TokenType.ARETURN, TokenType.ALOAD, TokenType.ALOAD_0, TokenType.ALOAD_1, TokenType.ALOAD_2, TokenType.ALOAD_3, TokenType.BALOAD, TokenType.CALOAD, TokenType.CASTORE, TokenType.CHECKCAST, TokenType.D2F, TokenType.D2I, TokenType.D2L, TokenType.DADD, TokenType.DALOAD, TokenType.DASTORE, TokenType.DCMPG, TokenType.DCMPL, TokenType.DCONST_0, TokenType.DCONST_1, TokenType.DDIV, TokenType.DLOAD, TokenType.DLOAD_0, TokenType.DLOAD_1, TokenType.DLOAD_2, TokenType.DLOAD_3, TokenType.DMUL, TokenType.DNEG, TokenType.DREM, TokenType.DRETURN, TokenType.DSTORE, TokenType.DSTORE_0, TokenType.DSTORE_1, TokenType.DSTORE_2, TokenType.DSTORE_3, TokenType.DSUB, TokenType.DUP, TokenType.DUP_X1, TokenType.DUP_X2, TokenType.DUP2, TokenType.DUP2_X1, TokenType.DUP2_X2, TokenType.F2D, TokenType.ATHROW, TokenType.ASTORE, TokenType.ASTORE_1, TokenType.ASTORE_2, TokenType.ASTORE_3, TokenType.BASTORE, TokenType.ICONST, TokenType.ICONST_0, TokenType.ICONST_1, TokenType.ICONST_2, TokenType.ICONST_3, TokenType.ICONST_4, TokenType.ICONST_5, TokenType.ISTORE, TokenType.ISTORE_1, TokenType.ISTORE_2, TokenType.ISTORE_3, TokenType.ILOAD, TokenType.ILOAD_0, TokenType.ILOAD_1, TokenType.ILOAD_2, TokenType.ILOAD_3, TokenType.IF_ACMPEQ, TokenType.IF_ACMPNE, TokenType.IF_ICMPEQ, TokenType.IF_ICMPNE, TokenType.IF_ICMPLT, TokenType.IF_ICMPGE, TokenType.IF_ICMPGT, TokenType.IF_ICMPLE, TokenType.IFEQ, TokenType.IFNE, TokenType.IFLT, TokenType.IFGE, TokenType.IFGT, TokenType.IFLE, TokenType.IFNONNULL, TokenType.IFNULL, TokenType.IADD, TokenType.IINC, TokenType.NEW, TokenType.BIPUSH, TokenType.F2I, TokenType.F2L, TokenType.FADD, TokenType.FALOAD, TokenType.FASTORE, TokenType.FCMPG, TokenType.FCMPL, TokenType.FCONST, TokenType.FCONST_0, TokenType.FCONST_1, TokenType.FCONST_2, TokenType.FCONST_3, TokenType.FDIV, TokenType.FLOAD, TokenType.FLOAD_0, TokenType.FLOAD_1, TokenType.FLOAD_2, TokenType.FLOAD_3, TokenType.FMUL, TokenType.FNEG, TokenType.FREM, TokenType.FRETURN, TokenType.FSTORE, TokenType.FSTORE_0, TokenType.FSTORE_1, TokenType.FSTORE_2, TokenType.FSTORE_3, TokenType.FSUB, TokenType.GETFIELD, TokenType.GETSTATIC, TokenType.I2B, TokenType.I2C, TokenType.I2D, TokenType.I2F, TokenType.I2L, TokenType.I2S, TokenType.IALOAD, TokenType.IAND, TokenType.IASTORE, TokenType.IDIV, TokenType.INEG, TokenType.IMUL, TokenType.INSTANCEOF, TokenType.INVOKEDYNAMIC, TokenType.INVOKEINTERFACE, TokenType.INVOKESPECIAL, TokenType.INVOKESTATIC, TokenType.INVOKEVIRTUAL, TokenType.INVOKENONVIRTUAL, TokenType.IOR, TokenType.IREM, TokenType.ISHL, TokenType.ISHR, TokenType.ISUB, TokenType.IUSHR, TokenType.IXOR, TokenType.JSR, TokenType.JSR_W, TokenType.L2D, TokenType.L2F, TokenType.L2I, TokenType.LADD, TokenType.LALOAD, TokenType.LAND, TokenType.LASTORE, TokenType.LCMP, TokenType.LCONST_0, TokenType.LCONST_1, TokenType.LDC, TokenType.LDC_W, TokenType.LDC2_W, TokenType.LDIV, TokenType.LLOAD, TokenType.LLOAD_0, TokenType.LLOAD_1, TokenType.LLOAD_2, TokenType.LLOAD_3, TokenType.LMUL, TokenType.LNEG, TokenType.LOOKUPSWITCH, TokenType.LREM, TokenType.LRETURN, TokenType.LSHL, TokenType.LSHR, TokenType.LOR, TokenType.LSTORE, TokenType.LSTORE_0, TokenType.LSTORE_1, TokenType.LSTORE_2, TokenType.LSTORE_3, TokenType.LSUB, TokenType.LUSHR, TokenType.LXOR, TokenType.MONITORENTER, TokenType.MONITOREXIT, TokenType.MULTIANEWARRAY, TokenType.NOP, TokenType.POP, TokenType.POP_2, TokenType.PUTFIELD, TokenType.PUTSTATIC, TokenType.RET, TokenType.SALOAD, TokenType.SASTORE, TokenType.SIPUSH, TokenType.SWAP, TokenType.TABLESWITCH, TokenType.WIDE, TokenType.IRETURN, TokenType.RETURN, TokenType.IDENTIFIER);
    }

    static private final EnumSet<TokenType> first_set$JasminParser_jj$545$6= tokenTypeSet(TokenType.LESS, TokenType.IDENTIFIER);
    static private final EnumSet<TokenType> first_set$JasminParser_jj$550$6= tokenTypeSet(TokenType.LINE_COMMENT, TokenType.CLOSE_PAREN);
    static private final EnumSet<TokenType> first_set$JasminParser_jj$570$24$= first_set$JasminParser_jj$570$24$_init();
    static private EnumSet<TokenType> first_set$JasminParser_jj$570$24$_init() {
        return tokenTypeSet(TokenType.LIMIT, TokenType.GO_TO, TokenType.GO_TO_W, TokenType.A_NEW_ARRAY, TokenType.ARRAY_LENGTH, TokenType.ARETURN, TokenType.ALOAD, TokenType.ALOAD_0, TokenType.ALOAD_1, TokenType.ALOAD_2, TokenType.ALOAD_3, TokenType.BALOAD, TokenType.CALOAD, TokenType.CASTORE, TokenType.CHECKCAST, TokenType.D2F, TokenType.D2I, TokenType.D2L, TokenType.DADD, TokenType.DALOAD, TokenType.DASTORE, TokenType.DCMPG, TokenType.DCMPL, TokenType.DCONST_0, TokenType.DCONST_1, TokenType.DDIV, TokenType.DLOAD, TokenType.DLOAD_0, TokenType.DLOAD_1, TokenType.DLOAD_2, TokenType.DLOAD_3, TokenType.DMUL, TokenType.DNEG, TokenType.DREM, TokenType.DRETURN, TokenType.DSTORE, TokenType.DSTORE_0, TokenType.DSTORE_1, TokenType.DSTORE_2, TokenType.DSTORE_3, TokenType.DSUB, TokenType.DUP, TokenType.DUP_X1, TokenType.DUP_X2, TokenType.DUP2, TokenType.DUP2_X1, TokenType.DUP2_X2, TokenType.F2D, TokenType.ATHROW, TokenType.ASTORE, TokenType.ASTORE_1, TokenType.ASTORE_2, TokenType.ASTORE_3, TokenType.BASTORE, TokenType.ICONST, TokenType.ICONST_0, TokenType.ICONST_1, TokenType.ICONST_2, TokenType.ICONST_3, TokenType.ICONST_4, TokenType.ICONST_5, TokenType.ISTORE, TokenType.ISTORE_1, TokenType.ISTORE_2, TokenType.ISTORE_3, TokenType.ILOAD, TokenType.ILOAD_0, TokenType.ILOAD_1, TokenType.ILOAD_2, TokenType.ILOAD_3, TokenType.IF_ACMPEQ, TokenType.IF_ACMPNE, TokenType.IF_ICMPEQ, TokenType.IF_ICMPNE, TokenType.IF_ICMPLT, TokenType.IF_ICMPGE, TokenType.IF_ICMPGT, TokenType.IF_ICMPLE, TokenType.IFEQ, TokenType.IFNE, TokenType.IFLT, TokenType.IFGE, TokenType.IFGT, TokenType.IFLE, TokenType.IFNONNULL, TokenType.IFNULL, TokenType.IADD, TokenType.IINC, TokenType.NEW, TokenType.BIPUSH, TokenType.F2I, TokenType.F2L, TokenType.FADD, TokenType.FALOAD, TokenType.FASTORE, TokenType.FCMPG, TokenType.FCMPL, TokenType.FCONST, TokenType.FCONST_0, TokenType.FCONST_1, TokenType.FCONST_2, TokenType.FCONST_3, TokenType.FDIV, TokenType.FLOAD, TokenType.FLOAD_0, TokenType.FLOAD_1, TokenType.FLOAD_2, TokenType.FLOAD_3, TokenType.FMUL, TokenType.FNEG, TokenType.FREM, TokenType.FRETURN, TokenType.FSTORE, TokenType.FSTORE_0, TokenType.FSTORE_1, TokenType.FSTORE_2, TokenType.FSTORE_3, TokenType.FSUB, TokenType.GETFIELD, TokenType.GETSTATIC, TokenType.I2B, TokenType.I2C, TokenType.I2D, TokenType.I2F, TokenType.I2L, TokenType.I2S, TokenType.IALOAD, TokenType.IAND, TokenType.IASTORE, TokenType.IDIV, TokenType.INEG, TokenType.IMUL, TokenType.INSTANCEOF, TokenType.INVOKEDYNAMIC, TokenType.INVOKEINTERFACE, TokenType.INVOKESPECIAL, TokenType.INVOKESTATIC, TokenType.INVOKEVIRTUAL, TokenType.INVOKENONVIRTUAL, TokenType.IOR, TokenType.IREM, TokenType.ISHL, TokenType.ISHR, TokenType.ISUB, TokenType.IUSHR, TokenType.IXOR, TokenType.JSR, TokenType.JSR_W, TokenType.L2D, TokenType.L2F, TokenType.L2I, TokenType.LADD, TokenType.LALOAD, TokenType.LAND, TokenType.LASTORE, TokenType.LCMP, TokenType.LCONST_0, TokenType.LCONST_1, TokenType.LDC, TokenType.LDC_W, TokenType.LDC2_W, TokenType.LDIV, TokenType.LLOAD, TokenType.LLOAD_0, TokenType.LLOAD_1, TokenType.LLOAD_2, TokenType.LLOAD_3, TokenType.LMUL, TokenType.LNEG, TokenType.LOOKUPSWITCH, TokenType.LREM, TokenType.LRETURN, TokenType.LSHL, TokenType.LSHR, TokenType.LOR, TokenType.LSTORE, TokenType.LSTORE_0, TokenType.LSTORE_1, TokenType.LSTORE_2, TokenType.LSTORE_3, TokenType.LSUB, TokenType.LUSHR, TokenType.LXOR, TokenType.MONITORENTER, TokenType.MONITOREXIT, TokenType.MULTIANEWARRAY, TokenType.NOP, TokenType.POP, TokenType.POP_2, TokenType.PUTFIELD, TokenType.PUTSTATIC, TokenType.RET, TokenType.SALOAD, TokenType.SASTORE, TokenType.SIPUSH, TokenType.SWAP, TokenType.TABLESWITCH, TokenType.WIDE, TokenType.IRETURN, TokenType.RETURN, TokenType.IDENTIFIER);
    }

    static private final EnumSet<TokenType> first_set$JasminParser_jj$570$24= first_set$JasminParser_jj$570$24_init();
    static private EnumSet<TokenType> first_set$JasminParser_jj$570$24_init() {
        return tokenTypeSet(TokenType.GO_TO, TokenType.GO_TO_W, TokenType.A_NEW_ARRAY, TokenType.ARRAY_LENGTH, TokenType.ARETURN, TokenType.ALOAD, TokenType.ALOAD_0, TokenType.ALOAD_1, TokenType.ALOAD_2, TokenType.ALOAD_3, TokenType.BALOAD, TokenType.CALOAD, TokenType.CASTORE, TokenType.CHECKCAST, TokenType.D2F, TokenType.D2I, TokenType.D2L, TokenType.DADD, TokenType.DALOAD, TokenType.DASTORE, TokenType.DCMPG, TokenType.DCMPL, TokenType.DCONST_0, TokenType.DCONST_1, TokenType.DDIV, TokenType.DLOAD, TokenType.DLOAD_0, TokenType.DLOAD_1, TokenType.DLOAD_2, TokenType.DLOAD_3, TokenType.DMUL, TokenType.DNEG, TokenType.DREM, TokenType.DRETURN, TokenType.DSTORE, TokenType.DSTORE_0, TokenType.DSTORE_1, TokenType.DSTORE_2, TokenType.DSTORE_3, TokenType.DSUB, TokenType.DUP, TokenType.DUP_X1, TokenType.DUP_X2, TokenType.DUP2, TokenType.DUP2_X1, TokenType.DUP2_X2, TokenType.F2D, TokenType.ATHROW, TokenType.ASTORE, TokenType.ASTORE_1, TokenType.ASTORE_2, TokenType.ASTORE_3, TokenType.BASTORE, TokenType.ICONST, TokenType.ICONST_0, TokenType.ICONST_1, TokenType.ICONST_2, TokenType.ICONST_3, TokenType.ICONST_4, TokenType.ICONST_5, TokenType.ISTORE, TokenType.ISTORE_1, TokenType.ISTORE_2, TokenType.ISTORE_3, TokenType.ILOAD, TokenType.ILOAD_0, TokenType.ILOAD_1, TokenType.ILOAD_2, TokenType.ILOAD_3, TokenType.IF_ACMPEQ, TokenType.IF_ACMPNE, TokenType.IF_ICMPEQ, TokenType.IF_ICMPNE, TokenType.IF_ICMPLT, TokenType.IF_ICMPGE, TokenType.IF_ICMPGT, TokenType.IF_ICMPLE, TokenType.IFEQ, TokenType.IFNE, TokenType.IFLT, TokenType.IFGE, TokenType.IFGT, TokenType.IFLE, TokenType.IFNONNULL, TokenType.IFNULL, TokenType.IADD, TokenType.IINC, TokenType.NEW, TokenType.BIPUSH, TokenType.F2I, TokenType.F2L, TokenType.FADD, TokenType.FALOAD, TokenType.FASTORE, TokenType.FCMPG, TokenType.FCMPL, TokenType.FCONST, TokenType.FCONST_0, TokenType.FCONST_1, TokenType.FCONST_2, TokenType.FCONST_3, TokenType.FDIV, TokenType.FLOAD, TokenType.FLOAD_0, TokenType.FLOAD_1, TokenType.FLOAD_2, TokenType.FLOAD_3, TokenType.FMUL, TokenType.FNEG, TokenType.FREM, TokenType.FRETURN, TokenType.FSTORE, TokenType.FSTORE_0, TokenType.FSTORE_1, TokenType.FSTORE_2, TokenType.FSTORE_3, TokenType.FSUB, TokenType.GETFIELD, TokenType.GETSTATIC, TokenType.I2B, TokenType.I2C, TokenType.I2D, TokenType.I2F, TokenType.I2L, TokenType.I2S, TokenType.IALOAD, TokenType.IAND, TokenType.IASTORE, TokenType.IDIV, TokenType.INEG, TokenType.IMUL, TokenType.INSTANCEOF, TokenType.INVOKEDYNAMIC, TokenType.INVOKEINTERFACE, TokenType.INVOKESPECIAL, TokenType.INVOKESTATIC, TokenType.INVOKEVIRTUAL, TokenType.INVOKENONVIRTUAL, TokenType.IOR, TokenType.IREM, TokenType.ISHL, TokenType.ISHR, TokenType.ISUB, TokenType.IUSHR, TokenType.IXOR, TokenType.JSR, TokenType.JSR_W, TokenType.L2D, TokenType.L2F, TokenType.L2I, TokenType.LADD, TokenType.LALOAD, TokenType.LAND, TokenType.LASTORE, TokenType.LCMP, TokenType.LCONST_0, TokenType.LCONST_1, TokenType.LDC, TokenType.LDC_W, TokenType.LDC2_W, TokenType.LDIV, TokenType.LLOAD, TokenType.LLOAD_0, TokenType.LLOAD_1, TokenType.LLOAD_2, TokenType.LLOAD_3, TokenType.LMUL, TokenType.LNEG, TokenType.LOOKUPSWITCH, TokenType.LREM, TokenType.LRETURN, TokenType.LSHL, TokenType.LSHR, TokenType.LOR, TokenType.LSTORE, TokenType.LSTORE_0, TokenType.LSTORE_1, TokenType.LSTORE_2, TokenType.LSTORE_3, TokenType.LSUB, TokenType.LUSHR, TokenType.LXOR, TokenType.MONITORENTER, TokenType.MONITOREXIT, TokenType.MULTIANEWARRAY, TokenType.NOP, TokenType.POP, TokenType.POP_2, TokenType.PUTFIELD, TokenType.PUTSTATIC, TokenType.RET, TokenType.SALOAD, TokenType.SASTORE, TokenType.SIPUSH, TokenType.SWAP, TokenType.TABLESWITCH, TokenType.WIDE, TokenType.IRETURN, TokenType.RETURN);
    }

    static private final EnumSet<TokenType> first_set$JasminParser_jj$573$6= tokenTypeSet(TokenType.LESS, TokenType.IDENTIFIER);
    static private final EnumSet<TokenType> first_set$JasminParser_jj$588$6= tokenTypeSet(TokenType.LINE_COMMENT, TokenType.CLOSE_PAREN);
    static private final EnumSet<TokenType> first_set$JasminParser_jj$605$6= tokenTypeSet(TokenType.INTEGER, TokenType.QUOTED);
    ArrayList<NonTerminalCall> parsingStack= new ArrayList<> ();
    private ArrayList<NonTerminalCall> lookaheadStack= new ArrayList<> ();
    /**
 * Inner class that represents entering a grammar production
 */
    class NonTerminalCall {
        final String sourceFile;
        final String productionName;
        final int offset;
        // We actually only use this when we're working with the LookaheadStack
        final boolean scanToEnd;
        NonTerminalCall(String sourceFile, String productionName, int offset) {
            this.sourceFile= sourceFile;
            this.productionName= productionName;
            this.offset= offset;
            this.scanToEnd= JasminParser.this.scanToEnd;
        }

        final JasminParserLexer getTokenSource() {
            return JasminParser.this.token_source;
        }

        final int getLine() {
            return getTokenSource().getLineFromOffset(offset);
        }

        final int getColumn() {
            return getTokenSource().getCodePointColumnFromOffset(offset);
        }

        StackTraceElement createStackTraceElement() {
            return new StackTraceElement("JasminParser", productionName, sourceFile, getLine());
        }

        void dump(PrintStream ps) {
            ps.println(productionName+":"+getLine()+":"+getColumn());
        }

    }
    private final void pushOntoCallStack(String methodName, String fileName, int offset) {
        parsingStack.add(new NonTerminalCall(fileName, methodName, offset));
    }

    private final void popCallStack() {
        NonTerminalCall ntc= parsingStack.remove(parsingStack.size()-1);
        this.currentlyParsedProduction= ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: "+currentlyParsedProduction);
        ps.println("Current Lookahead Production is: "+currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token oldToken= lastConsumedToken;
        Token nextToken= nextToken(lastConsumedToken);
        if (nextToken.getType()!=expectedType) {
            nextToken= handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken= nextToken;
        this.nextTokenType= null;
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private class ParseState {
        Token lastConsumed;
        ArrayList<NonTerminalCall> parsingStack;
        ParseState() {
            this.lastConsumed= JasminParser.this.lastConsumedToken;
            @SuppressWarnings("unchecked")
            ArrayList<NonTerminalCall> parsingStack= (ArrayList<NonTerminalCall> ) JasminParser.this.parsingStack.clone();
            this.parsingStack= parsingStack;
        }

    }
    public boolean isTreeBuildingEnabled() {
        return false;
    }

}
